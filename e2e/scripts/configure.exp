#!/usr/bin/expect -f


# expect script for automating alks developer configure.

# Username and refresh token are taken from the environment and auto-replied to
# a series of prompts.
#
# The username and refresh token must be set as environment variables in the
# executing shell
#
# On linux/mac:
#   export USERNAME=<my_network_login>
#   export REFRESH_TOKEN=<my_alks_refresh_token>

# For help with expect, see:
#   https://man7.org/linux/man-pages/man1/expect.1.html
#   https://github.com/aeruder/expect/tree/master/example
#
# An important note from the man pages that describes generally how expect works,
#
#    Each time new output arrives, it is compared to each pattern in the order they
#    are listed


# variables
set server "https://alks.coxautoinc.com/rest"
set username "$env(USERNAME)"
set refreshToken "$env(REFRESH_TOKEN)"

# expect config
## wait 5 seconds per pattern match
set timeout 5
## variable key entry speed to simulate human input
set send_slow {1 .1}
set send_human {.1 .3 1 .05 2}
## wait for up to 100000 bytes of output to display before matching
match_max 100000

# starting program
spawn alks developer configure
expect_after eof {exit 0}

# input alks server from envvar on system
expect "ALKS server*rest" {send -h "$server\r"}
sleep .1

# input alks network username from envvar on system
expect "Network Username" {send -h "$username\r"}
sleep .1

# choose refresh token auth flow by returning on first option
expect "OAuth2 refresh token" {send -h "\r"}
sleep .1

# input refresh token from envvar on system
expect "Refresh Token" {send -h "$refreshToken\r"}
sleep .1

# Wait for validation and plaintext prompt
expect {
    "Refresh token validated!" {
        # Token validated, continue
        exp_continue
    }
    -re "plaintext file.*\\(y/N" {
        send "y\r"
    }
    "plaintext file" {
        send "y\r"
    }
    "Refresh token saved!" {
        # Already saved, good
    }
}
sleep .1

# skipping the other configuration options
expect eof
